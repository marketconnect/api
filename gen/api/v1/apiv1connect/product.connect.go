// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/product.proto

package apiv1connect

import (
	v1 "api/gen/api/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CreateProductCardServiceName is the fully-qualified name of the CreateProductCardService service.
	CreateProductCardServiceName = "api.v1.CreateProductCardService"
	// BalanceServiceName is the fully-qualified name of the BalanceService service.
	BalanceServiceName = "api.v1.BalanceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CreateProductCardServiceCreateProductCardProcedure is the fully-qualified name of the
	// CreateProductCardService's CreateProductCard RPC.
	CreateProductCardServiceCreateProductCardProcedure = "/api.v1.CreateProductCardService/CreateProductCard"
	// BalanceServiceGetBalanceProcedure is the fully-qualified name of the BalanceService's GetBalance
	// RPC.
	BalanceServiceGetBalanceProcedure = "/api.v1.BalanceService/GetBalance"
)

// CreateProductCardServiceClient is a client for the api.v1.CreateProductCardService service.
type CreateProductCardServiceClient interface {
	CreateProductCard(context.Context, *connect.Request[v1.CreateProductCardRequest]) (*connect.Response[v1.CreateProductCardResponse], error)
}

// NewCreateProductCardServiceClient constructs a client for the api.v1.CreateProductCardService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCreateProductCardServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CreateProductCardServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	createProductCardServiceMethods := v1.File_api_v1_product_proto.Services().ByName("CreateProductCardService").Methods()
	return &createProductCardServiceClient{
		createProductCard: connect.NewClient[v1.CreateProductCardRequest, v1.CreateProductCardResponse](
			httpClient,
			baseURL+CreateProductCardServiceCreateProductCardProcedure,
			connect.WithSchema(createProductCardServiceMethods.ByName("CreateProductCard")),
			connect.WithClientOptions(opts...),
		),
	}
}

// createProductCardServiceClient implements CreateProductCardServiceClient.
type createProductCardServiceClient struct {
	createProductCard *connect.Client[v1.CreateProductCardRequest, v1.CreateProductCardResponse]
}

// CreateProductCard calls api.v1.CreateProductCardService.CreateProductCard.
func (c *createProductCardServiceClient) CreateProductCard(ctx context.Context, req *connect.Request[v1.CreateProductCardRequest]) (*connect.Response[v1.CreateProductCardResponse], error) {
	return c.createProductCard.CallUnary(ctx, req)
}

// CreateProductCardServiceHandler is an implementation of the api.v1.CreateProductCardService
// service.
type CreateProductCardServiceHandler interface {
	CreateProductCard(context.Context, *connect.Request[v1.CreateProductCardRequest]) (*connect.Response[v1.CreateProductCardResponse], error)
}

// NewCreateProductCardServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCreateProductCardServiceHandler(svc CreateProductCardServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	createProductCardServiceMethods := v1.File_api_v1_product_proto.Services().ByName("CreateProductCardService").Methods()
	createProductCardServiceCreateProductCardHandler := connect.NewUnaryHandler(
		CreateProductCardServiceCreateProductCardProcedure,
		svc.CreateProductCard,
		connect.WithSchema(createProductCardServiceMethods.ByName("CreateProductCard")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.CreateProductCardService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CreateProductCardServiceCreateProductCardProcedure:
			createProductCardServiceCreateProductCardHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCreateProductCardServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCreateProductCardServiceHandler struct{}

func (UnimplementedCreateProductCardServiceHandler) CreateProductCard(context.Context, *connect.Request[v1.CreateProductCardRequest]) (*connect.Response[v1.CreateProductCardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.CreateProductCardService.CreateProductCard is not implemented"))
}

// BalanceServiceClient is a client for the api.v1.BalanceService service.
type BalanceServiceClient interface {
	GetBalance(context.Context, *connect.Request[v1.GetBalanceRequest]) (*connect.Response[v1.GetBalanceResponse], error)
}

// NewBalanceServiceClient constructs a client for the api.v1.BalanceService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBalanceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BalanceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	balanceServiceMethods := v1.File_api_v1_product_proto.Services().ByName("BalanceService").Methods()
	return &balanceServiceClient{
		getBalance: connect.NewClient[v1.GetBalanceRequest, v1.GetBalanceResponse](
			httpClient,
			baseURL+BalanceServiceGetBalanceProcedure,
			connect.WithSchema(balanceServiceMethods.ByName("GetBalance")),
			connect.WithClientOptions(opts...),
		),
	}
}

// balanceServiceClient implements BalanceServiceClient.
type balanceServiceClient struct {
	getBalance *connect.Client[v1.GetBalanceRequest, v1.GetBalanceResponse]
}

// GetBalance calls api.v1.BalanceService.GetBalance.
func (c *balanceServiceClient) GetBalance(ctx context.Context, req *connect.Request[v1.GetBalanceRequest]) (*connect.Response[v1.GetBalanceResponse], error) {
	return c.getBalance.CallUnary(ctx, req)
}

// BalanceServiceHandler is an implementation of the api.v1.BalanceService service.
type BalanceServiceHandler interface {
	GetBalance(context.Context, *connect.Request[v1.GetBalanceRequest]) (*connect.Response[v1.GetBalanceResponse], error)
}

// NewBalanceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBalanceServiceHandler(svc BalanceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	balanceServiceMethods := v1.File_api_v1_product_proto.Services().ByName("BalanceService").Methods()
	balanceServiceGetBalanceHandler := connect.NewUnaryHandler(
		BalanceServiceGetBalanceProcedure,
		svc.GetBalance,
		connect.WithSchema(balanceServiceMethods.ByName("GetBalance")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.BalanceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BalanceServiceGetBalanceProcedure:
			balanceServiceGetBalanceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBalanceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBalanceServiceHandler struct{}

func (UnimplementedBalanceServiceHandler) GetBalance(context.Context, *connect.Request[v1.GetBalanceRequest]) (*connect.Response[v1.GetBalanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.BalanceService.GetBalance is not implemented"))
}
