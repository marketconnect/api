syntax = "proto3";

package api.v1;

option go_package = "api/gen/api/v1;apiv1";

// ProductRequest represents the input with the 5 required fields
message CreateRequest {
  string product_title = 1;
  string product_description = 2;
  int32 parent_id = 3;
  int32 subject_id = 4;
  int32 root_id = 5;
  int32 sub_id = 6;
  int32 type_id = 7;
  bool generate_content = 8;
  bool ozon = 9;
  bool wb = 10;
  bool translate = 11;
  string vendor_code = 12;
  Dimensions dimensions = 13;
  string brand = 14;
  repeated Size sizes = 15;
  string wb_api_key = 16; // API key for Wildberries, provided by user
  repeated WBMediaFileToUpload wb_media_to_upload_files = 17; // List of files to upload
  repeated string wb_media_to_save_links = 18; // List of URLs for media_save
  string ozon_api_client_id = 19; // Client ID for Ozon API
  string ozon_api_key = 20; // API Key for Ozon API
}

message Dimensions {
  int32 length = 1;
  int32 width = 2;
  int32 height = 3;
  double weight_brutto = 4;
}

message Size {
  string tech_size = 1;
  string wb_size = 2;
  int32 price = 3;
  repeated string skus = 4;
}

message WBMediaFileToUpload {
  bytes content = 1; // File content
  string filename = 2; // Original filename, e.g. "photo.jpg"
  int32 photo_number = 3; // Value for X-Photo-Number header
}

// ProductResponse represents the output from the Python API
message CreateResponse {
  string title = 1;
  map<string, string> attributes = 2;
  string description = 3;
  string parent_name = 4;
  int32 parent_id = 5;
  string subject_name = 6;
  int32 subject_id = 7;
  int32 root_id = 8;
  string root_name = 9;
  int32 type_id = 10;
  string type_name = 11;
  int32 sub_id = 12;
  string sub_name = 13;
  optional string wb_api_response_json = 14; // JSON string of the WB API response if attempted
  optional string wb_prepared_request_json = 15; // JSON string of the prepared WB request if API key not provided
  optional bool wb_request_attempted = 16; // True if WB API call was made, False if JSON prepared, Null if wb=false
  repeated WBMediaUploadIndividualResponse wb_media_upload_individual_responses = 17;
  optional WBMediaSaveByLinksResponse wb_media_save_by_links_response = 18;
  optional string ozon_api_response_json = 19; // JSON string of the Ozon API response if attempted
  optional bool ozon_request_attempted = 20; // True if Ozon API call was made
}

message WBMediaUploadIndividualResponse {
  int32 photo_number = 1; // Corresponds to the photo_number from WBMediaFileToUpload
  optional string response_json = 2; // JSON string of WBMediaGenericResponse
  optional string error_message = 3; // Error message if this specific upload failed
}

message WBMediaSaveByLinksResponse {
  optional string response_json = 1; // JSON string of WBMediaGenericResponse
  optional string error_message = 2; // Error message if save by links operation failed
}

// CreateProductCardService provides product card processing functionality
service ProductService {
  rpc Create(CreateRequest) returns (CreateResponse) {}
}

// Balance request and response messages
message GetBalanceRequest {
  // API key will be provided via Authorization header
}

message GetBalanceResponse {
  int32 balance = 1; // Current balance amount
}

// BalanceService provides balance management functionality
service BalanceService {
  rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse) {}
}



// Payment system messages
message PaymentRequest {
  int64 amount = 1; // Amount in kopecks (1 ruble = 100 kopecks)
  string email = 2; // Customer email
  int64 order_number = 3; // Unique order number
  string description = 4; // Payment description
  string end_date = 5; // Subscription end date (YYYY-MM-DD format)
  Receipt receipt = 6; // Receipt data for fiscal compliance
}

message Receipt {
  string email = 1; // Customer email for receipt
  string taxation = 2; // Taxation system (e.g., "usn_income")
  repeated ReceiptItem items = 3; // Items in the receipt
}

message ReceiptItem {
  string name = 1; // Item name
  int64 price = 2; // Item price in kopecks
  double quantity = 3; // Item quantity
  int64 amount = 4; // Total amount for this item in kopecks
  string tax = 5; // Tax type (e.g., "none", "vat10", "vat20")
  string payment_method = 6; // Payment method (e.g., "full_payment")
  string payment_object = 7; // Payment object type (e.g., "service", "commodity")
}

message PaymentResponse {
  bool success = 1; // Whether the payment request was successful
  string payment_url = 2; // URL for customer to complete payment
  string payment_id = 3; // Tinkoff payment ID
  string error_message = 4; // Error message if success is false
}

message TinkoffNotificationRequest {
  string terminal_key = 1; // Terminal key
  int64 amount = 2; // Payment amount
  int64 order_id = 3; // Order ID
  bool success = 4; // Payment success status
  string status = 5; // Payment status
  int64 payment_id = 6; // Payment ID
  string error_code = 7; // Error code (if any)
  string message = 8; // Status message
  string details = 9; // Additional details
  string token = 10; // Security token/signature
}

message TinkoffNotificationResponse {
  string status = 1; // Response status ("OK" for successful processing)
}

// PaymentService provides payment processing functionality
service PaymentService {
  rpc Payment(PaymentRequest) returns (PaymentResponse) {}
  rpc TinkoffNotification(TinkoffNotificationRequest) returns (TinkoffNotificationResponse) {}
}
